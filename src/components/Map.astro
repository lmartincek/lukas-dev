---
import { locations } from "../constants/locations.ts";

const apiKey = import.meta.env.PUBLIC_GOOGLE_API_KEY
---
<!-- TODO- reconsider rewriting to react component -->

<div id="map-overlay" style="display: none"
     class="fixed z-[1000] flex justify-center items-center inset-0 bg-black/50 backdrop-blur-sm sm:top-10 sm:right-10 sm:inset-auto sm:bg-transparent sm:backdrop-blur-0">
    <div class="maps-content-overlay bg-white w-[320px] md:w-[360px] max-h-[400px] p-5 rounded-lg text-left overflow-y-auto relative shadow-2xl">
        <div id="close-overlay" class="absolute top-4 right-4 cursor-pointer z-10">X</div>
        <div id="map-content" class="maps-content"/>
    </div>
</div>

<section class="pt-8">
    <h2 class="font-medium tracking-tight text-title">Map</h2>
    <div class="pt-1.5">
        <div id="map" class="h-[500px] w-full"></div>
    </div>
</section>

<script is:inline define:vars={{apiKey}}>
    (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
        key: apiKey,
        v: "weekly",
        language: 'en',
        // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
        // Add other bootstrap parameters as needed, using camel case.
    });
</script>

<script is:inline define:vars={{locations}}>
function getContent(title, year, photos) {
    return `
    <h3 class="text-primary text-xl">${title}</h3>
    <h4 class="text-sm font-bold my-2">${year}</h4>
    
    <p class="text-sm mb-5">Story to be told soon...</p>
    
    <h3 class="font-serif text-[1.25rem] tracking-widest mb-2">MEMORIES</h3>
    
    ${photos.map(({ img, alt, label }) => `
        <figure class="overflow-hidden shadow-md mb-5">
            <img 
                src="${img}" 
                alt="${alt}"
                class="w-full object-cover" 
                loading="lazy"
            />
            <figcaption class="text-center text-sm py-2">
                ${label}
            </figcaption>
        </figure>
    `).join('')}
`
}
async function initMap() {
    const { Map } = await google.maps.importLibrary("maps");
    const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

    const map = new Map(document.getElementById("map"), {
        zoom: 2,
        center: { lat: 35, lng: 5 },
        mapId: 'map',
        fullscreenControl: false,
        streetViewControl: false,
        mapTypeControl: false,
        cameraControl: false,
        zoomControl: true,
    });

    const closeBtn = document.getElementById('close-overlay')
    const mapOverlay = document.getElementById('map-overlay')
    const mapContent = document.getElementById('map-content')

    if (closeBtn && mapOverlay && mapContent) {
        closeBtn.addEventListener('click', () => {
            mapContent.innerHTML = "";
            mapOverlay.style.display = "none"
        })

        locations.forEach(({ title, year, position, photos }) => {
            const markerPin = document.createElement('img');
            markerPin.src = '/backpacker.svg';
            markerPin.className = 'w-7 h-7 rounded-xl';
            markerPin.ariaLabel = `marker-${title}`;

            const marker = new AdvancedMarkerElement({
                position,
                map,
                content: markerPin,
            });

            marker.addListener('gmp-click', () => {
                mapContent.innerHTML = getContent(title, year, photos)
                mapOverlay.style.display = "flex"
            });
        });
    }
}

initMap().then()
</script>